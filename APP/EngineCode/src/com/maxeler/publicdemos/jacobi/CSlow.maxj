package com.maxeler.publicdemos.jacobi;

import java.util.Random;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;

public class CSlow extends Kernel
{
	final DFEType floatType = dfeFloat(8, 24);
	private static final int C = 13;

	public CSlow(KernelParameters parameters) {
		super(parameters);

		// Input
		DFEVar input = io.input("input", floatType);
		DFEVar rows = io.scalarInput("rows", dfeUInt(32));


		CounterChain chain = control.count.makeCounterChain();
		DFEVar x = chain.addCounter(rows, 1);
		chain.addCounter(C, 1);

		DFEVar partialSum = floatType.newInstance(this);
		DFEVar sum = x.eq(0) ? 0.0 : partialSum;

		// The loop body itself
		DFEVar newSum = input + sum;

		partialSum <== stream.offset(newSum, -C);


		io.output("output", newSum, floatType, x.eq(rows - 1));
	}

	public static void main(String[] args) {
		SimulationManager mgr = new SimulationManager("Blah");
		CSlow k = new CSlow(mgr.makeKernelParameters());
		mgr.setKernel(k);

		Random  rand = new Random();

		int rows = 2  ;
		int cols =  6 *C;
		double input[] = new double[rows * cols];
		for(int i = 0; i < rows; i ++)
		{
			for(int j = 0; j < cols; j ++)
			{
				input[i * cols + j] = rand.nextInt(5);
			}
		}

		int nrows = rows * cols/C;
		int ncols = C;

		double trans_input[] = new double[nrows * ncols];
		int ni = 0;
		int kk = 0;
		for(int i = 0; i < nrows; i ++)
		{
			for(int j = 0; j < ncols; j ++)
			{
				trans_input[i * ncols + j] = input[ni * cols + kk * ncols + j];
			}
			ni ++;
			if(ni == rows)
			{
				ni = 0;
				kk ++;
			}
		}





		System.out.println("input:  ");
		for(int i = 0; i < rows; i ++)
		{
			for(int j = 0; j < cols; j ++)
			{
				System.out.print(input[i * cols + j] + "   ");
			}
			System.out.println();

		}
//
//		System.out.println("transpose input:  ");
//		for(int i = 0; i < nrows; i ++)
//		{
//			for(int j = 0; j < ncols; j ++)
//			{
//				System.out.print(trans_input[i * ncols + j] + "   ");
//			}
//			System.out.println();
//
//		}



		mgr.setInputData("input", trans_input);
		mgr.setScalarInput("rows", rows);
		mgr.setKernelCycles(input.length);
		mgr.runTest();
		mgr.dumpOutput();
	}
}
